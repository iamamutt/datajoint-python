from .attribute_adapter import get_adapter as get_adapter
from .errors import (
    DataJointError as DataJointError,
    FILEPATH_FEATURE_SWITCH as FILEPATH_FEATURE_SWITCH,
    _support_filepath_types as _support_filepath_types,
)
from _typeshed import Incomplete

UUID_DATA_TYPE: str
MAX_TABLE_NAME_LENGTH: int
CONSTANT_LITERALS: Incomplete
EXTERNAL_TABLE_ROOT: str
TYPE_PATTERN: Incomplete
SPECIAL_TYPES: Incomplete
NATIVE_TYPES: Incomplete
EXTERNAL_TYPES: Incomplete
SERIALIZED_TYPES: Incomplete

def match_type(attribute_type): ...

logger: Incomplete

def build_foreign_key_parser_old(): ...
def build_foreign_key_parser(): ...
def build_attribute_parser(): ...
def build_index_parser(): ...

foreign_key_parser_old: Incomplete
foreign_key_parser: Incomplete
attribute_parser: Incomplete
index_parser: Incomplete

def is_foreign_key(line): ...
def compile_foreign_key(
    line, context, attributes, primary_key, attr_sql, foreign_key_sql, index_sql
) -> None: ...
def prepare_declare(definition, context): ...
def declare(full_table_name, definition, context): ...
def _make_attribute_alter(new, old, primary_key): ...
def alter(definition, old_definition, context): ...
def compile_index(line, index_sql) -> None: ...
def substitute_special_type(match, category, foreign_key_sql, context) -> None: ...
def compile_attribute(line, in_key, foreign_key_sql, context): ...
