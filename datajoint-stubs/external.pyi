from . import s3 as s3
from .declare import EXTERNAL_TABLE_ROOT as EXTERNAL_TABLE_ROOT
from .errors import (
    DataJointError as DataJointError,
    MissingExternalFile as MissingExternalFile,
)
from .hash import uuid_from_buffer as uuid_from_buffer, uuid_from_file as uuid_from_file
from .heading import Heading as Heading
from .settings import config as config
from .table import FreeTable as FreeTable, Table as Table
from .utils import safe_copy as safe_copy, safe_write as safe_write
from _typeshed import Incomplete
from collections.abc import Mapping

logger: Incomplete
CACHE_SUBFOLDING: Incomplete
SUPPORT_MIGRATED_BLOBS: bool

def subfold(name, folds): ...

class ExternalTable(Table):
    store: Incomplete
    spec: Incomplete
    _s3: Incomplete
    database: Incomplete
    _connection: Incomplete
    _heading: Incomplete
    _support: Incomplete
    def __init__(self, connection, store, database) -> None: ...
    @property
    def definition(self): ...
    @property
    def table_name(self): ...
    @property
    def s3(self): ...
    def _make_external_filepath(self, relative_filepath): ...
    def _make_uuid_path(self, uuid, suffix: str = ...): ...
    def _upload_file(
        self, local_path, external_path, metadata: Incomplete | None = ...
    ) -> None: ...
    def _download_file(self, external_path, download_path) -> None: ...
    def _upload_buffer(self, buffer, external_path) -> None: ...
    def _download_buffer(self, external_path): ...
    def _remove_external_file(self, external_path) -> None: ...
    def exists(self, external_filepath): ...
    def put(self, blob): ...
    def get(self, uuid): ...
    def upload_attachment(self, local_path): ...
    def get_attachment_name(self, uuid): ...
    def download_attachment(self, uuid, attachment_name, download_path) -> None: ...
    def upload_filepath(self, local_filepath): ...
    def download_filepath(self, filepath_hash): ...
    @property
    def references(self): ...
    def fetch_external_paths(self, **fetch_kwargs): ...
    def unused(self): ...
    def used(self): ...
    def delete(
        self,
        *,
        delete_external_files: Incomplete | None = ...,
        limit: Incomplete | None = ...,
        display_progress: bool = ...,
        errors_as_string: bool = ...
    ): ...

class ExternalMapping(Mapping):
    schema: Incomplete
    _tables: Incomplete
    def __init__(self, schema) -> None: ...
    def __repr__(self): ...
    def __getitem__(self, store): ...
    def __len__(self): ...
    def __iter__(self): ...
