import numpy as np
from .errors import DataJointError as DataJointError
from .settings import config as config
from _typeshed import Incomplete

deserialize_lookup: Incomplete
serialize_lookup: Incomplete
compression: Incomplete
bypass_serialization: bool
use_32bit_dims: bool

def len_u64(obj): ...
def len_u32(obj): ...

class MatCell(np.ndarray): ...
class MatStruct(np.recarray): ...

class Blob:
    _squeeze: Incomplete
    _blob: Incomplete
    _pos: int
    protocol: Incomplete
    def __init__(self, squeeze: bool = ...) -> None: ...
    def set_dj0(self) -> None: ...
    def squeeze(self, array, convert_to_scalar: bool = ...): ...
    def unpack(self, blob): ...
    def read_blob(self, n_bytes: Incomplete | None = ...): ...
    def pack_blob(self, obj): ...
    def read_array(self): ...
    def pack_array(self, array): ...
    def read_recarray(self): ...
    def pack_recarray(self, array): ...
    def read_sparse_array(self) -> None: ...
    def read_int(self): ...
    @staticmethod
    def pack_int(v): ...
    def read_bool(self): ...
    @staticmethod
    def pack_bool(v): ...
    def read_complex(self): ...
    @staticmethod
    def pack_complex(v): ...
    def read_float(self): ...
    @staticmethod
    def pack_float(v): ...
    def read_decimal(self): ...
    @staticmethod
    def pack_decimal(d): ...
    def read_string(self): ...
    @staticmethod
    def pack_string(s): ...
    def read_bytes(self): ...
    @staticmethod
    def pack_bytes(s): ...
    def read_none(self) -> None: ...
    @staticmethod
    def pack_none(): ...
    def read_tuple(self): ...
    def pack_tuple(self, t): ...
    def read_list(self): ...
    def pack_list(self, t): ...
    def read_set(self): ...
    def pack_set(self, t): ...
    def read_dict(self): ...
    def pack_dict(self, d): ...
    def read_struct(self): ...
    def pack_struct(self, array): ...
    def read_cell_array(self): ...
    def pack_cell_array(self, array): ...
    def read_datetime(self): ...
    @staticmethod
    def pack_datetime(d): ...
    def read_uuid(self): ...
    @staticmethod
    def pack_uuid(obj): ...
    def read_zero_terminated_string(self): ...
    def read_value(self, dtype: Incomplete | None = ..., count: int = ...): ...
    def read_binary(self, size): ...
    def pack(self, obj, compress): ...

def pack(obj, compress: bool = ...): ...
def unpack(blob, squeeze: bool = ...): ...
