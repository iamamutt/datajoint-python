import networkx as nx
from .dependencies import unite_master_parts as unite_master_parts
from .errors import DataJointError as DataJointError
from .table import Table as Table, lookup_class_name as lookup_class_name
from .user_tables import (
    Computed as Computed,
    Imported as Imported,
    Lookup as Lookup,
    Manual as Manual,
    Part as Part,
)
from _typeshed import Incomplete

plot_active: bool
diagram_active: bool
logger: Incomplete
user_table_classes: Incomplete

class _AliasNode: ...

def _get_tier(table_name): ...

class Diagram:
    def __init__(self, *args, **kwargs) -> None: ...

class Diagram(nx.DiGraph):
    nodes_to_show: Incomplete
    context: Incomplete
    def __init__(self, source, context: Incomplete | None = ...) -> None: ...
    @classmethod
    def from_sequence(cls, sequence): ...
    def add_parts(self): ...
    def topological_sort(self): ...
    def __add__(self, arg): ...
    def __sub__(self, arg): ...
    def __mul__(self, arg): ...
    def _make_graph(self): ...
    def make_dot(self): ...
    def make_svg(self): ...
    def make_png(self): ...
    def make_image(self): ...
    def _repr_svg_(self): ...
    def draw(self) -> None: ...
    def save(self, filename, format: Incomplete | None = ...) -> None: ...
    @staticmethod
    def _layout(graph, **kwargs): ...
