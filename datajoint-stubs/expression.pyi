from .condition import (
    AndList as AndList,
    Not as Not,
    PromiscuousOperand as PromiscuousOperand,
    assert_join_compatibility as assert_join_compatibility,
    extract_column_names as extract_column_names,
    make_condition as make_condition,
)
from .declare import CONSTANT_LITERALS as CONSTANT_LITERALS
from .errors import DataJointError as DataJointError
from .fetch import Fetch as Fetch, Fetch1 as Fetch1
from .preview import preview as preview, repr_html as repr_html
from .settings import config as config
from _typeshed import Incomplete

logger: Incomplete

class QueryExpression:
    _restriction: Incomplete
    _restriction_attributes: Incomplete
    _left: Incomplete
    _original_heading: Incomplete
    _connection: Incomplete
    _heading: Incomplete
    _support: Incomplete
    _distinct: bool
    @property
    def connection(self): ...
    @property
    def support(self): ...
    @property
    def heading(self): ...
    @property
    def original_heading(self): ...
    @property
    def restriction(self): ...
    @property
    def restriction_attributes(self): ...
    @property
    def primary_key(self): ...
    _subquery_alias_count: Incomplete
    def from_clause(self): ...
    def where_clause(self): ...
    def make_sql(self, fields: Incomplete | None = ...): ...
    def make_subquery(self): ...
    def restrict(self, restriction): ...
    def restrict_in_place(self, restriction) -> None: ...
    def __and__(self, restriction): ...
    def __xor__(self, restriction): ...
    def __sub__(self, restriction): ...
    def __neg__(self): ...
    def __mul__(self, other): ...
    def __matmul__(self, other): ...
    def join(self, other, semantic_check: bool = ..., left: bool = ...): ...
    def __add__(self, other): ...
    def proj(self, *attributes, **named_attributes): ...
    def aggr(
        self, group, *attributes, keep_all_rows: bool = ..., **named_attributes
    ): ...
    aggregate: Incomplete
    @property
    def fetch1(self): ...
    @property
    def fetch(self): ...
    def head(self, limit: int = ..., **fetch_kwargs): ...
    def tail(self, limit: int = ..., **fetch_kwargs): ...
    def __len__(self): ...
    def __bool__(self): ...
    def __contains__(self, item): ...
    _iter_only_key: Incomplete
    _iter_keys: Incomplete
    def __iter__(self): ...
    def __next__(self): ...
    def cursor(
        self,
        offset: int = ...,
        limit: Incomplete | None = ...,
        order_by: Incomplete | None = ...,
        as_dict: bool = ...,
    ): ...
    def __repr__(self): ...
    def preview(
        self, limit: Incomplete | None = ..., width: Incomplete | None = ...
    ): ...
    def _repr_html_(self): ...

class Aggregation(QueryExpression):
    _left_restrict: Incomplete
    _subquery_alias_count: Incomplete
    @classmethod
    def create(cls, arg, group, keep_all_rows: bool = ...): ...
    def where_clause(self): ...
    def make_sql(self, fields: Incomplete | None = ...): ...
    def __len__(self): ...
    def __bool__(self): ...

class Union(QueryExpression):
    __count: Incomplete
    @classmethod
    def create(cls, arg1, arg2): ...
    def make_sql(self): ...
    def from_clause(self) -> None: ...
    def where_clause(self) -> None: ...
    def __len__(self): ...
    def __bool__(self): ...

class U:
    _primary_key: Incomplete
    def __init__(self, *primary_key) -> None: ...
    @property
    def primary_key(self): ...
    def __and__(self, other): ...
    def join(self, other, left: bool = ...): ...
    def __mul__(self, other): ...
    def aggr(self, group, **named_attributes): ...
    aggregate: Incomplete
