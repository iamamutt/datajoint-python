import collections
from .errors import DataJointError as DataJointError
from _typeshed import Incomplete
from collections.abc import Generator

LOCALCONFIG: str
GLOBALCONFIG: str
DEFAULT_SUBFOLDING: Incomplete
validators: Incomplete
Role: Incomplete
role_to_prefix: Incomplete
prefix_to_role: Incomplete
default: Incomplete
logger: Incomplete
log_levels: Incomplete

class Config(collections.abc.MutableMapping):
    instance: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __getattr__(self, name): ...
    def __getitem__(self, item): ...
    def __setitem__(self, item, value) -> None: ...
    def __str__(self): ...
    def __repr__(self): ...
    def __delitem__(self, key) -> None: ...
    def __iter__(self): ...
    def __len__(self): ...
    def save(self, filename, verbose: bool = ...) -> None: ...
    def load(self, filename) -> None: ...
    def save_local(self, verbose: bool = ...) -> None: ...
    def save_global(self, verbose: bool = ...) -> None: ...
    def get_store_spec(self, store): ...
    def __call__(self, **kwargs) -> Generator[Incomplete, None, None]: ...

    class __Config:
        _conf: Incomplete
        def __init__(self, *args, **kwargs) -> None: ...
        def __getitem__(self, key): ...
        def __setitem__(self, key, value) -> None: ...

config: Incomplete
config_files: Incomplete
config_file: Incomplete
mapping: Incomplete
