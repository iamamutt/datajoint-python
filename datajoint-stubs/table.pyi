from . import blob as blob
from .condition import make_condition as make_condition
from .declare import alter as alter, declare as declare
from .errors import (
    AccessError as AccessError,
    DataJointError as DataJointError,
    DuplicateError as DuplicateError,
    IntegrityError as IntegrityError,
    UnknownAttributeError as UnknownAttributeError,
)
from .expression import QueryExpression as QueryExpression
from .heading import Heading as Heading
from .settings import config as config
from .utils import get_master as get_master, user_choice as user_choice
from _typeshed import Incomplete

logger: Incomplete
foreign_key_error_regexp: Incomplete
constraint_info_query: Incomplete

class _RenameMap(tuple): ...

class Table(QueryExpression):
    _table_name: Incomplete
    _log_: Incomplete
    database: Incomplete
    declaration_context: Incomplete
    @property
    def table_name(self): ...
    @property
    def definition(self) -> str: ...
    def declare(self, context: Incomplete | None = ...) -> None: ...
    def alter(self, prompt: bool = ..., context: Incomplete | None = ...) -> None: ...
    def from_clause(self): ...
    def get_select_fields(self, select_fields: Incomplete | None = ...): ...
    def parents(
        self,
        primary: Incomplete | None = ...,
        as_objects: bool = ...,
        foreign_key_info: bool = ...,
    ): ...
    def children(
        self,
        primary: Incomplete | None = ...,
        as_objects: bool = ...,
        foreign_key_info: bool = ...,
    ): ...
    def descendants(self, as_objects: bool = ...): ...
    def ancestors(self, as_objects: bool = ...): ...
    def parts(self, as_objects: bool = ...): ...
    @property
    def is_declared(self): ...
    @property
    def full_table_name(self): ...
    @property
    def _log(self): ...
    @property
    def external(self): ...
    def update1(self, row) -> None: ...
    def insert1(self, row, **kwargs) -> None: ...
    def insert(
        self,
        rows,
        replace: bool = ...,
        skip_duplicates: bool = ...,
        ignore_extra_fields: bool = ...,
        allow_direct_insert: Incomplete | None = ...,
    ) -> None: ...
    def delete_quick(self, get_count: bool = ...): ...
    def delete(
        self,
        transaction: bool = ...,
        safemode: Incomplete | None = ...,
        force_parts: bool = ...,
    ): ...
    def drop_quick(self) -> None: ...
    def drop(self) -> None: ...
    @property
    def size_on_disk(self): ...
    def show_definition(self) -> None: ...
    def describe(self, context: Incomplete | None = ..., printout: bool = ...): ...
    def _update(self, attrname, value: Incomplete | None = ...) -> None: ...
    def __make_placeholder(self, name, value, ignore_extra_fields: bool = ...): ...
    def __make_row_to_insert(self, row, field_list, ignore_extra_fields): ...

def lookup_class_name(name, context, depth: int = ...): ...

class FreeTable(Table):
    _connection: Incomplete
    _support: Incomplete
    _heading: Incomplete
    def __init__(self, conn, full_table_name) -> None: ...
    def __repr__(self): ...

class Log(Table):
    _table_name: str
    database: Incomplete
    skip_logging: Incomplete
    _connection: Incomplete
    _heading: Incomplete
    _support: Incomplete
    _definition: Incomplete
    _user: Incomplete
    def __init__(self, conn, database, skip_logging: bool = ...) -> None: ...
    @property
    def definition(self): ...
    def __call__(self, event, skip_logging: Incomplete | None = ...) -> None: ...
    def delete(self): ...
    def drop(self) -> None: ...
