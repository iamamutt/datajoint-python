from .attribute_adapter import (
    AttributeAdapter as AttributeAdapter,
    get_adapter as get_adapter,
)
from .declare import (
    EXTERNAL_TYPES as EXTERNAL_TYPES,
    NATIVE_TYPES as NATIVE_TYPES,
    SPECIAL_TYPES as SPECIAL_TYPES,
    TYPE_PATTERN as TYPE_PATTERN,
    UUID_DATA_TYPE as UUID_DATA_TYPE,
)
from .errors import (
    DataJointError as DataJointError,
    FILEPATH_FEATURE_SWITCH as FILEPATH_FEATURE_SWITCH,
    _support_filepath_types as _support_filepath_types,
)
from _typeshed import Incomplete

logger: Incomplete
default_attribute_properties: Incomplete

class Attribute:
    def todict(self): ...
    @property
    def sql_type(self): ...
    @property
    def sql_comment(self): ...
    @property
    def sql(self): ...
    @property
    def original_name(self): ...

class Heading:
    indexes: Incomplete
    table_info: Incomplete
    _table_status: Incomplete
    _attributes: Incomplete
    def __init__(
        self,
        attribute_specs: Incomplete | None = ...,
        table_info: Incomplete | None = ...,
    ) -> None: ...
    def __len__(self): ...
    @property
    def table_status(self): ...
    @property
    def attributes(self): ...
    @property
    def names(self): ...
    @property
    def primary_key(self): ...
    @property
    def secondary_attributes(self): ...
    @property
    def blobs(self): ...
    @property
    def non_blobs(self): ...
    @property
    def new_attributes(self): ...
    def __getitem__(self, name): ...
    def __repr__(self): ...
    @property
    def has_autoincrement(self): ...
    @property
    def as_dtype(self): ...
    def as_sql(self, fields, include_aliases: bool = ...): ...
    def __iter__(self): ...
    def _init_from_database(self) -> None: ...
    def select(
        self,
        select_list,
        rename_map: Incomplete | None = ...,
        compute_map: Incomplete | None = ...,
    ): ...
    def join(self, other): ...
    def set_primary_key(self, primary_key): ...
    def make_subquery_heading(self): ...
